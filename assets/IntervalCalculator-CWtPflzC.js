import{g as p,b as v,t as O}from"./index-BqBuALeO.js";import{i as V,g as f,d as b,a as E,s as q}from"./index-CR7BTo9t.js";import{c as y}from"./vexflow-helper-BJ71SLUW.js";const F=`<!-- src/tools/IntervalCalculator/IntervalCalculator.html -->
<div class="tool-section interval-calculator-tool">
  <!-- 更通用的标题 -->
  <h3>音程分析器</h3>
  <!-- 更新描述，加入第三种格式 -->
  <p>输入格式:
      <br>1. 两音符: <code>C4 G4</code> (计算音程)
      <br>2. 基础音符 + 音程: <code>C4 M3 P5</code> (构建声部)
      <br>3. 多个音符: <code>C4 E4 G4 B4</code> (识别和弦)
      <br>(所有音符必须带八度)
  </p>

  <div class="interval-input-area">
    <label for="interval-notes-input">输入:</label>
    <!-- 更新 placeholder -->
    <input type="text" id="interval-notes-input" placeholder="例如: C4 G4 或 C4 M3 P5 或 C4 E4 G4">
    <!-- 更通用的按钮文本 -->
    <button id="calculate-interval-button">分析</button>
    <button id="clear-interval-button" class="secondary-button">清除</button>
  </div>

  <div id="interval-result-area" class="result-display-area">
      <p style="display: none;">结果:</p> <!-- 初始隐藏 -->
      <div id="interval-error-output" class="error-message"></div>
      <!-- 声部构建或多音符输入的音符显示 -->
      <div id="voicing-notes-output"></div>
      <!-- 新增：和弦检测结果显示 -->
      <div id="chord-detection-output"></div>
      <!-- 音程计算模式专用 -->
      <div id="interval-details-container" style="display: none;">
          <div id="interval-name-output"></div>
          <div id="interval-semitones-output"></div>
          <div id="interval-consonance-output"></div>
          <!-- 包裹两个选项的容器 -->
          <div class="interval-options-container">
              <div class="option-group">
                  <input type="checkbox" id="invert-interval-checkbox">
                  <label for="invert-interval-checkbox">显示转位</label>
              </div>
              <div class="option-group">
                  <input type="checkbox" id="simplify-interval-checkbox">
                  <label for="simplify-interval-checkbox">显示简化</label>
              </div>
          </div>
      </div>
  </div>

  <!-- VexFlow 显示容器 -->
  <div class="vexflow-display-container interval-score-container" style="display: none;">
      <div class="score-item">
          <!-- 标题将由 JS 动态设置 -->
          <h4 id="harmonic-title"></h4>
          <div id="harmonic-interval-score" class="vexflow-score-container" style="min-height: 150px;"></div>
      </div>
      <div class="score-item">
          <!-- 标题将由 JS 动态设置 -->
          <h4 id="melodic-title"></h4>
          <div id="melodic-interval-score" class="vexflow-score-container" style="min-height: 150px;"></div>
      </div>
  </div>
</div>`;function M(o){const t={inputField:o.querySelector("#interval-notes-input"),calculateButton:o.querySelector("#calculate-interval-button"),clearIntervalButton:o.querySelector("#clear-interval-button"),resultArea:o.querySelector("#interval-result-area"),resultTitle:o.querySelector("#interval-result-area > p:first-child"),errorOutput:o.querySelector("#interval-error-output"),voicingNotesOutput:o.querySelector("#voicing-notes-output"),chordDetectionOutput:o.querySelector("#chord-detection-output"),intervalDetailsContainer:o.querySelector("#interval-details-container"),intervalNameOutput:o.querySelector("#interval-name-output"),semitonesOutput:o.querySelector("#interval-semitones-output"),consonanceOutput:o.querySelector("#interval-consonance-output"),invertCheckbox:o.querySelector("#invert-interval-checkbox"),simplifyCheckbox:o.querySelector("#simplify-interval-checkbox"),scoreContainer:o.querySelector(".vexflow-display-container"),harmonicScoreDiv:o.querySelector("#harmonic-interval-score"),melodicScoreDiv:o.querySelector("#melodic-interval-score"),harmonicTitle:o.querySelector("#harmonic-title"),melodicTitle:o.querySelector("#melodic-title")};return!t.inputField||!t.calculateButton||!t.errorOutput||!t.harmonicScoreDiv||!t.melodicScoreDiv?(console.error("乐理分析器错误: 缺少关键 UI 元素。"),null):((!t.chordDetectionOutput||!t.intervalDetailsContainer||!t.voicingNotesOutput)&&console.warn("乐理分析器警告: 部分结果显示区域未找到。"),t)}function L(o){const t=o.trim();if(!t)return{mode:null,data:null,error:"输入不能为空。"};const e=t.split(/\s+/).filter(l=>l);if(e.length<2)return{mode:null,data:null,error:"输入至少需要两部分。"};const r=e[0],n=p(r);if(n.empty||n.oct===null)return{mode:null,data:null,error:`第一部分 "${r}" 必须是有效的带八度音符。`};const i=e[1],s=f(i),c=p(i);if(s.empty)if(!c.empty&&c.oct!==null){const l=[n.name];let a=null;for(let u=1;u<e.length;u++){const d=p(e[u]);if(d.empty||d.oct===null){a=e[u];break}l.push(d.name)}return a?{mode:null,data:null,error:`输入中包含无效或缺少八度的音符: "${a}"。`}:l.length===2?{mode:"twoNotes",data:{notes:l},error:null}:(l.sort((u,d)=>(v(u)??1/0)-(v(d)??1/0)),{mode:"chordDetect",data:{notes:l},error:null})}else return e.length===2?{mode:null,data:null,error:`无法识别第二部分 "${i}"，它既不是有效音程也不是有效音符(或缺少八度)。`}:{mode:null,data:null,error:"输入格式无法识别。请检查音符是否都带八度。"};else if(e.length===2){const l=A(n.name,i);return l.error?{mode:null,data:null,error:l.error}:{mode:"twoNotes",data:{notes:[n.name,l.note]},error:null}}else{const l=e.slice(1),a=l.filter(u=>f(u).empty);return a.length>0?{mode:null,data:null,error:`以下部分不是有效的音程: ${a.join(", ")}`}:{mode:"multiIntervalVoicing",data:{baseNote:n.name,intervals:l},error:null}}}function P(o){if(!o)return"未知";const t=f(o);if(t.empty)return"未知";const e=t.simple,r=t.q;return r==="P"&&[1,4,5,8].includes(e)?"完全协和":(r==="M"||r==="m")&&[3,6].includes(e)?"不完全协和":"不协和"}function B(o,t){try{const e=E(o,t);if(!e||e==="")return{props:null,error:"无法计算音程，请检查输入。"};const r=f(e);return r.empty?{props:null,error:`无法解析计算出的音程 "${e}"。`}:{props:r,error:null}}catch(e){return console.error("计算音程时出错:",e),{props:null,error:"计算过程中发生错误。"}}}function H(o,t){console.log("calculateVoicingNotes - 输入:",{baseNote:o,intervalNames:t});const e=[];try{e.push(o);for(const r of t){const n=O(o,r),i=p(n);if(i.empty)return{notes:null,error:`从基础音符 "${o}" 应用音程 "${r}" 时出错。`};e.includes(i.name)||e.push(i.name)}return console.log("calculateVoicingNotes - 排序前:",[...e]),e.sort((r,n)=>(v(r)??1/0)-(v(n)??1/0)),console.log("calculateVoicingNotes - 排序后:",[...e]),{notes:e,error:null}}catch(r){return console.error("构建声部时出错:",r),{notes:null,error:`构建声部时发生错误: ${r.message}`}}}function D(o){if(console.log("detectChordFromNotes - START - 输入音符:",[...o]),!o||o.length<2)return console.log("detectChordFromNotes - END - 错误: 音符不足。"),{chords:[],error:"和弦检测至少需要输入两个音符。"};try{if(typeof b!="function")return console.error("detectChordFromNotes - ERROR: Chord.detect 不是一个函数!"),{chords:[],error:"内部错误：无法访问和弦检测功能。"};const t=b(o);return console.log("detectChordFromNotes - Chord.detect 返回:",t),console.log("detectChordFromNotes - END - 成功。"),{chords:t,error:null}}catch(t){return console.error("detectChordFromNotes - ERROR during Chord.detect:",t),console.log("detectChordFromNotes - END - 异常退出。"),{chords:[],error:`和弦检测过程中发生错误: ${t.message}`}}}function A(o,t){try{const e=O(o,t),r=p(e);return r.empty?{note:null,error:`应用音程 "${t}" 到 "${o}" 时出错，结果无效。`}:{note:r.name,error:null}}catch(e){return console.error("计算单音程移调时出错:",e),{note:null,error:`移调时发生错误: ${e.message}`}}}function m(o){const t=p(o);if(t.empty||t.oct===null)return null;let e="";return t.acc==="b"?e="b":t.acc==="#"?e="#":t.acc==="bb"?e="bb":(t.acc==="x"||t.acc==="##")&&(e="##"),`${t.letter.toLowerCase()}${e}/${t.oct}`}function k(o){if(!o||o.length===0)return"treble";const t=o.map(r=>v(r)).filter(r=>r!==null);return t.length===0||t.reduce((r,n)=>r+n,0)/t.length>=60?"treble":"bass"}function G(o,t,e,r=!1){if(!o||!o.harmonicScoreDiv||!o.melodicScoreDiv){console.error("渲染音程谱例错误：缺少 elements 或 score divs。"),o&&o.errorOutput&&(o.errorOutput.textContent="渲染谱例时发生内部错误。");return}const n=m(t),i=m(e);if(!n||!i){console.error("无法为 VexFlow 准备 keys:",t,e),o.errorOutput&&(o.errorOutput.textContent="无法渲染：音符格式无效");return}const s=o.harmonicScoreDiv.id,c=o.melodicScoreDiv.id;if(!s||!c){console.error("渲染错误：VexFlow 容器缺少 ID。"),o.errorOutput&&(o.errorOutput.textContent="渲染错误：容器缺少 ID。");return}o.harmonicTitle.textContent="和声音程",o.melodicTitle.textContent="旋律音程",o.harmonicTitle.style.display="block",o.melodicTitle.style.display="block";const l=k([t,e]);o.harmonicScoreDiv.innerHTML="",o.melodicScoreDiv.innerHTML="";const a={elementId:s,width:150,height:150,staves:[{clef:l,notes:[{keys:[n,i].sort(),duration:"w"}]}]},u={elementId:c,width:200,height:150,staves:[{clef:l,notes:[{keys:[n],duration:"h"},{keys:[i],duration:"h"}]}]};try{y(s,a),y(c,u)}catch(d){console.error("渲染音程谱例出错:",d),o.errorOutput&&(o.errorOutput.textContent=`渲染错误: ${d.message}`)}}function K(o,t){if(console.log("renderVoicingScores - 接收到的音符:",[...t]),!o||!o.harmonicScoreDiv||!o.melodicScoreDiv){console.error("渲染声部谱例错误：缺少 elements 或 score divs。"),o&&o.errorOutput&&(o.errorOutput.textContent="渲染谱例时发生内部错误。");return}if(!t||t.length<1){console.error("渲染声部谱例错误：无效的音符数组。"),o&&o.errorOutput&&(o.errorOutput.textContent="无法渲染谱例：无有效音符。");return}const e=t.map(m).filter(a=>a);if(e.length!==t.length){console.error("部分音符无法转换为 VexFlow keys:",t),o&&o.errorOutput&&(o.errorOutput.textContent="渲染谱例时发生错误：部分音符格式无效。");return}const r=o.harmonicScoreDiv.id,n=o.melodicScoreDiv.id;if(!r||!n){console.error("渲染错误：VexFlow 容器缺少 ID。"),o.errorOutput&&(o.errorOutput.textContent="渲染错误：容器缺少 ID。");return}o.harmonicTitle.textContent="和声声部",o.melodicTitle.textContent="旋律序列",o.harmonicTitle.style.display="block",o.melodicTitle.style.display="block";const i=k(t);o.harmonicScoreDiv.innerHTML="",o.melodicScoreDiv.innerHTML="";const s={elementId:r,width:Math.max(150,40+e.length*20),height:150,staves:[{clef:i,notes:[{keys:e.slice().sort(),duration:"w"}]}]},c=e.map(a=>({keys:[a],duration:"q"}));console.log("renderVoicingScores - 用于旋律谱例的 VexNotes:",c);const l={elementId:n,width:Math.max(200,60+c.length*40),height:150,staves:[{clef:i,timeSignature:`${c.length}/4`,notes:c}]};c.length>8?(l.staves[0].timeSignature="4/4",l.width=Math.max(300,60+c.length*30)):c.length>0&&(l.staves[0].timeSignature=`${c.length}/4`);try{y(r,s),y(n,l),console.log("renderVoicingScores - 谱例渲染调用完成。")}catch(a){console.error("渲染 VexFlow 谱例时出错:",a),o.errorOutput&&(o.errorOutput.textContent=`渲染谱例时发生错误: ${a.message}`),o.harmonicTitle.style.display="none",o.melodicTitle.style.display="none"}}function x(o){o&&(o.errorOutput.textContent="",o.voicingNotesOutput.textContent="",o.chordDetectionOutput&&(o.chordDetectionOutput.textContent=""),o.intervalDetailsContainer&&(o.intervalDetailsContainer.style.display="none"),o.intervalNameOutput.textContent="",o.semitonesOutput.textContent="",o.consonanceOutput.textContent="",o.scoreContainer&&(o.scoreContainer.style.display="none"),o.harmonicScoreDiv.innerHTML="",o.melodicScoreDiv.innerHTML="",o.harmonicTitle&&(o.harmonicTitle.style.display="none"),o.melodicTitle&&(o.melodicTitle.style.display="none"),o.resultTitle&&(o.resultTitle.style.display="none"))}function h(o,t){x(o),o.errorOutput.textContent=`错误: ${t}`}function j(o,t,e,r,n){if(x(o),!t||t.empty){h(o,"无法获取有效的音程属性。");return}o.resultTitle&&(o.resultTitle.style.display="block");const i=t.q,s=t.num,l=`${t.dir===-1?"-":""}${i}${s}`,a=t.semitones,u=P(t.name),d=Math.abs(t.num)>8;let g=`音程: ${l}`;if(r&&(g+=" (转位)"),n&&d){const T=q(t.name),C=f(T);if(C.empty)g+=" [无法简化]";else{const R=C.q,I=C.num,$=`${C.dir===-1?"-":""}${R}${I}`;g+=` [简化: ${$}]`}}o.intervalNameOutput.textContent=g,o.semitonesOutput.textContent=`半音数量: ${a}${r?" (转位)":""}`,o.consonanceOutput.textContent=`协和性: ${u}${r?" (转位)":""}`,o.intervalDetailsContainer&&(o.intervalDetailsContainer.style.display="block"),e&&e.length===2&&o.scoreContainer&&(o.scoreContainer.style.display="flex",G(o,e[0],e[1],r))}function N(o,t,e){if(console.log("displayChordResult - START - Received:",{detectedChords:t,inputNotes:e}),x(o),!e||e.length===0){console.log("displayChordResult - END - 错误: 无效输入音符。"),h(o,"无有效输入音符。");return}if(o.resultTitle&&(o.resultTitle.style.display="block"),o.intervalDetailsContainer&&(o.intervalDetailsContainer.style.display="none"),!o.voicingNotesOutput||!o.chordDetectionOutput){console.error("displayChordResult - ERROR: UI 元素缺失 (voicingNotesOutput 或 chordDetectionOutput)");return}o.voicingNotesOutput.textContent=`相关音符: ${e.join(" ")}`,console.log("displayChordResult - 设置 voicingNotesOutput 完成。"),t&&t.length>0?o.chordDetectionOutput.textContent=`检测到的和弦: ${t.join(", ")}`:o.chordDetectionOutput.textContent="未检测到明确的和弦。",console.log("displayChordResult - 设置 chordDetectionOutput 完成。"),o.scoreContainer?o.harmonicScoreDiv&&o.melodicScoreDiv?(o.scoreContainer.style.display="flex",console.log("displayChordResult - 准备调用 renderVoicingScores..."),K(o,e)):console.error("displayChordResult - ERROR: scoreContainer 内的谱例元素缺失！"):console.warn("displayChordResult - WARN: scoreContainer 元素未找到。"),console.log("displayChordResult - END")}function w(o){o&&(o.inputField.value="",x(o),o.invertCheckbox&&(o.invertCheckbox.checked=!1),o.simplifyCheckbox&&(o.simplifyCheckbox.checked=!1),console.log("输入和结果已清除。"))}function S(o){if(console.log("handleCalculation - START"),!o){console.log("handleCalculation - END - elements 为空");return}const t=o.inputField.value,e=L(t);if(console.log("handleCalculation - 解析结果:",e),e.error){h(o,e.error),console.log("handleCalculation - END - 解析错误");return}switch(e.mode){case"twoNotes":{console.log(">>> handleCalculation - Entering twoNotes case");const{notes:r}=e.data;console.log("handleCalculation - twoNotes - notes:",r);const n=o.invertCheckbox?o.invertCheckbox.checked:!1,i=o.simplifyCheckbox?o.simplifyCheckbox.checked:!1;console.log("handleCalculation - twoNotes - options:",{showInversion:n,showSimplified:i});let s=null,c=null;const l=B(r[0],r[1]);if(console.log("handleCalculation - twoNotes - originalResult:",l),l.error)console.log("handleCalculation - twoNotes - 原始计算出错:",l.error),c=l.error;else if(!l.props||l.props.empty)console.error("handleCalculation - twoNotes - 原始计算结果无效但没有错误信息:",l),c="未能计算有效的原始音程。";else if(n){console.log("handleCalculation - twoNotes - 尝试转位:",l.props.name);try{const a=V(l.props.name);if(console.log("handleCalculation - twoNotes - 转位名称:",a),!a||a==="")console.error("handleCalculation - twoNotes - Interval.invert 返回空!"),c="无法计算此音程的转位(空结果)。";else{const u=f(a);console.log("handleCalculation - twoNotes - 转位属性:",u),!u||u.empty?(console.error("handleCalculation - twoNotes - 获取转位属性失败!"),c="无法获取转位音程的属性。"):(s=u,console.log("handleCalculation - twoNotes - 转位成功，finalResultProps 已设置。"))}}catch(a){console.error("handleCalculation - twoNotes - 转位计算异常:",a),c=`计算转位时出错: ${a.message}`}}else console.log("handleCalculation - twoNotes - 使用原始结果。"),s=l.props;console.log("handleCalculation - twoNotes - 准备显示，finalResultProps:",s,"calculationError:",c),c?h(o,c):s&&!s.empty?j(o,s,r,n,i):(console.error("handleCalculation - twoNotes - 最终状态异常：无错误但结果无效。"),h(o,"无法获取有效的音程属性(最终检查)。")),console.log("<<< handleCalculation - Exiting twoNotes case");break}case"multiIntervalVoicing":{console.log(">>> handleCalculation - Entering multiIntervalVoicing case");const{baseNote:r,intervals:n}=e.data;console.log("handleCalculation - multiIntervalVoicing - data:",{baseNote:r,intervals:n});const i=H(r,n);if(console.log("handleCalculation - multiIntervalVoicing - voicingResult:",i),i.error)h(o,i.error);else if(!i.notes||i.notes.length===0)console.error("handleCalculation - multiIntervalVoicing - voicingResult.notes 无效"),h(o,"未能生成有效的音符列表。");else{console.log("handleCalculation - multiIntervalVoicing - 准备调用 detectChordFromNotes...");const s=D(i.notes);console.log("handleCalculation - multiIntervalVoicing - chordResult:",s),s.error?h(o,s.error):(console.log("handleCalculation - multiIntervalVoicing - 准备调用 displayChordResult..."),N(o,s.chords,i.notes))}console.log("<<< handleCalculation - Exiting multiIntervalVoicing case");break}case"chordDetect":{console.log(">>> handleCalculation - Entering chordDetect case");const{notes:r}=e.data;console.log("handleCalculation - chordDetect - data:",{notes:r}),console.log("handleCalculation - chordDetect - 准备调用 detectChordFromNotes...");const n=D(r);console.log("handleCalculation - chordDetect - chordResult:",n),n.error?h(o,n.error):(console.log("handleCalculation - chordDetect - 准备调用 displayChordResult..."),N(o,n.chords,r)),console.log("<<< handleCalculation - Exiting chordDetect case");break}default:console.log("handleCalculation - 未知模式:",e.mode),h(o,"无法识别的处理模式。")}console.log("handleCalculation - END")}function U(o){if(!o)return;o.calculateButton&&o.calculateButton.addEventListener("click",()=>S(o)),o.clearIntervalButton&&o.clearIntervalButton.addEventListener("click",()=>w(o)),o.inputField;const t=()=>{const r=(o.inputField?o.inputField.value:"").trim().split(/\s+/).filter(i=>i);let n=!1;if(r.length===2){const i=p(r[0]),s=p(r[1]),c=f(r[1]);!i.empty&&i.oct!==null&&(!s.empty&&s.oct!==null?n=!0:c.empty||(n=!0))}n?(console.log("Option changed, recalculating for interval mode."),S(o)):console.log("Option changed, but not in interval mode. No recalculation.")};o.invertCheckbox&&o.invertCheckbox.addEventListener("change",t),o.simplifyCheckbox&&o.simplifyCheckbox.addEventListener("change",t)}function X(o){if(!o){console.error("乐理分析器初始化失败: 未提供容器元素。");return}o.innerHTML=F;const t=M(o);t&&(U(t),w(t),console.log("乐理分析器工具已初始化 (支持音程/声部/和弦)。"))}export{X as initializeIntervalCalculator};
